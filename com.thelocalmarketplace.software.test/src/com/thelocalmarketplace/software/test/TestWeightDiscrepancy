package com.thelocalmarketplace.software.test;
//Danish Sharma 30172600

import com.jjjwelectronics.Numeral;
import com.jjjwelectronics.scale.ElectronicScale;
import com.jjjwelectronics.scale.ElectronicScaleListener;
import com.jjjwelectronics.scale.IElectronicScale;
import com.jjjwelectronics.scanner.Barcode;
import com.jjjwelectronics.scanner.BarcodeScanner;
import com.jjjwelectronics.scanner.BarcodeScannerListener;
import com.thelocalmarketplace.hardware.BarcodedProduct;
import com.thelocalmarketplace.hardware.external.ProductDatabases;
import com.thelocalmarketplace.software.*;

import ca.ucalgary.seng300.simulation.InvalidArgumentSimulationException;
import ca.ucalgary.seng300.simulation.NullPointerSimulationException;
import powerutility.NoPowerException;
import powerutility.PowerGrid;

import com.jjjwelectronics.IDevice;
import com.jjjwelectronics.IDeviceListener;
import com.jjjwelectronics.Item;
import com.jjjwelectronics.Mass;
import com.jjjwelectronics.scanner.IBarcodeScanner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

public class TestWeightDiscrepancy {
	int theMassOnTheScaleHasExceededItsLimitCount = 0;
	WeightDiscrepancyStub weightDiscrepancyStub;
	IElectronicScaleStub test = new IElectronicScaleStub();
	ItemStub stubItem = new ItemStub(Mass.ONE_GRAM);
	WeightDiscrepancy tester;
	
	
	@Before
	public void setup() {
		weightDiscrepancyStub = new WeightDiscrepancyStub(test);
	}
	@Test
	public void testValidPayWithCoin() {
		int expectedSignifier = 1;
		weightDiscrepancyStub.getOrderItems().add(stubItem);
		weightDiscrepancyStub.addItemByScanning(stubItem);
		weightDiscrepancyStub.payWithCoin(Mass.ONE_GRAM);
		assertEquals(expectedSignifier, weightDiscrepancyStub.getSignifier());
	}
	@Test
	public void testTotalOrderMassMisalignedPayWithCoin() {
		try {
			weightDiscrepancyStub.payWithCoin(Mass.ONE_GRAM);
		}catch(IllegalStateException e) {
			return;
		}
		fail("Expected IllegalStateException");
	}
	@Test
	public void testValidAddItemByScanning() {
		int expectedLength = 1;
		weightDiscrepancyStub.getOrderItems().add(stubItem);
		weightDiscrepancyStub.addItemByScanning(stubItem);
		assertEquals(expectedLength, weightDiscrepancyStub.getItemsOnScale().size());
	}
	@Test
	public void testDiscrepancyNotClearedAddItemByScanning() {
		weightDiscrepancyStub.discrepancyNotCleared();
		try {
			weightDiscrepancyStub.addItemByScanning(stubItem);
		}catch(IllegalStateException e) {
			return;
		}
		fail("Expected IllegalStateException");
		
	}
	@Test
	public void testDiscrepancyNotClearedPayWithCoin() {
		weightDiscrepancyStub.discrepancyNotCleared();
		try {
			weightDiscrepancyStub.payWithCoin(Mass.ONE_GRAM);
		}catch(IllegalStateException e) {
			return;
		}
		fail("Expected IllegalStateException");
	}
	@Test
	public void testCalculateTotalMass() {
		Mass expectedMass = Mass.ZERO;
		assertEquals(expectedMass, weightDiscrepancyStub.calculateTotalMassOnScale());
	}
	@Test
	public void testClearDiscrepancy() {
		int expectedLength = 0;
		weightDiscrepancyStub.discrepancyNotCleared();
		weightDiscrepancyStub.clearDiscrepancy();
		assertTrue(weightDiscrepancyStub.getDiscrepancy());
		assertEquals(expectedLength, weightDiscrepancyStub.getOrderItems().size());
	}
	@Test
	public void testInvalidClearDiscrepancy() {
		int expectedLength = 1;
		weightDiscrepancyStub.getOrderItems().add(stubItem);
		weightDiscrepancyStub.addItemByScanning(stubItem);
		weightDiscrepancyStub.clearDiscrepancy();
		assertEquals(expectedLength, weightDiscrepancyStub.getItemsOnScale().size());
		assertTrue(weightDiscrepancyStub.getDiscrepancy());
	}
	@Test
	public void testRemoveExtraItem() {
		int expectedLength = 0;
		weightDiscrepancyStub.discrepancyNotCleared();
		weightDiscrepancyStub.getItemsOnScale().add(stubItem);
		weightDiscrepancyStub.removeExtraItem(stubItem);
		assertEquals(expectedLength, weightDiscrepancyStub.getItemsOnScale().size());
	}
	@Test
	public void testAddMissingItem() {
		int expectedLength = 1;
		weightDiscrepancyStub.discrepancyNotCleared();
		weightDiscrepancyStub.addMissingItem(stubItem);
		assertEquals(expectedLength, weightDiscrepancyStub.getItemsOnScale().size());
	}
	@Test
	public void testTheMassOnTheScaleHasExceededItsLimitCount() {
		int expectedCount = 1;
		weightDiscrepancyStub.theMassOnTheScaleHasExceededItsLimit(test);
		assertEquals(expectedCount, weightDiscrepancyStub.getTheMassOnTheScaleHasExceededItsLimitCount());
	}
	@Test
	public void testTheMassOnTheScaleNoLongerExceedsItsLimitCount() {
		int expectedCount = 1;
		weightDiscrepancyStub.theMassOnTheScaleNoLongerExceedsItsLimit(test);
		assertEquals(expectedCount, weightDiscrepancyStub.getTheMassOnTheScaleNoLongerExceedsItsLimitCount());
	}
	@Test
	public void testTheMassHasChanged() {
		int expectedCount = 1;
		weightDiscrepancyStub.getOrderItems().add(stubItem);
		weightDiscrepancyStub.addItemByScanning(stubItem);
		weightDiscrepancyStub.discrepancyNotCleared();
		weightDiscrepancyStub.theMassOnTheScaleHasChanged(test, Mass.ONE_GRAM);
		assertEquals(expectedCount, weightDiscrepancyStub.getTheMassOnTheScaleHasChangedCount());
		assertTrue(weightDiscrepancyStub.getDiscrepancy());
	}
}
